@model MVCValidationTest.Models.RegisterViewModel
@using MVCValidationTest.Infra
@{
    ViewBag.Title = "Register";
}

<h2>Register</h2>


@using (Html.BeginForm("Register", "Home", FormMethod.Post, new { @id = "myForm" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>RegisterViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div style="background-color:lightgreen; color:maroon;padding:5px;margin-bottom:10px;">@ViewBag.Message</div>
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Rank, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Rank, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rank, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VehicleNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VehicleNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.VehicleNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.CheckMark)
                    @Html.LabelFor(model => model.CheckMark, new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.CheckMark, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Income, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Income, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Income, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Role, StaticDataProviders.GetRoleTypesList(), new { @class = "form-control" } )
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
                <span style="padding:0 10px;"></span>
                <input type="reset" value="Reset" class="btn btn-default" onreset="resetMessages()" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    function resetMessages() {
        $('.text-danger.field-validation-valid').empty();
        return false;
    }

    $(function () {
        $.validator.addMethod('checkPositive', function (value, element, params) {
            if (!isNaN(value)) {
                value = new Number(value);
                if (value < 0)
                    return false;
                else
                    return true;
            }
        });
        /*
        $.validator.addMethod('date', function (value, element, params) {
            if (this.optional(element)) return true;

            var ok = true;
            try {
                $.datepicker.parseDate(value, 'mm/dd/yy')
            }
            catch (err) {
                ok = false;
            }
            return ok;
        });
        
        $('#myForm').validate({
            rules: {
                Income: {
                    checkPositive: true
                }
            },
            messages: {
                Income: {
                    checkPositive: 'Income cannot be negative amount'
                }
            }
        });
        */

        $.validator.unobtrusive.adapters.add('checkpositive', [], function (options) {
            options.rules['checkPositive'] = true;
            options.messages['checkPositive'] = options.message;
        });
    });
</script>